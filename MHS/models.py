from sklearn import ensemble, linear_model, naive_bayes, neural_network, neighbors, svm, tree
from xgboost import XGBRegressor, XGBClassifier
from catboost import CatBoostClassifier, CatBoostRegressor
from lightgbm import LGBMClassifier, LGBMRegressor
from sklearn.preprocessing import RobustScaler
from MHS.model_hybrid_selector import LassoSelector
from sklearn.pipeline import Pipeline

models = {
    "AdaBoostClassifier": ensemble.AdaBoostClassifier(),
    "AdaBoostRegressor": ensemble.AdaBoostRegressor(),
    "BaggingClassifier": ensemble.BaggingClassifier(),
    "BaggingRegressor": ensemble.BaggingRegressor(),
    "ExtraTreesClassifier": ensemble.ExtraTreesClassifier(),
    "ExtraTreesRegressor": ensemble.ExtraTreesRegressor(),
    "GradientBoostingClassifier": ensemble.GradientBoostingClassifier(),
    "GradientBoostingRegressor": ensemble.GradientBoostingRegressor(), #
    "IsolationForest": ensemble.IsolationForest(),
    "RandomForestClassifier": ensemble.RandomForestClassifier(),
    "RandomForestRegressor": ensemble.RandomForestRegressor(), #
    "RandomTreesEmbedding": ensemble.RandomTreesEmbedding(),
    "HistGradientBoostingRegressor": ensemble.HistGradientBoostingRegressor(), #
    "HistGradientBoostingClassifier": ensemble.HistGradientBoostingClassifier(),
    "LogisticRegression": linear_model.LogisticRegression(),
    "LogisticRegressionCV": linear_model.LogisticRegressionCV(),
    "PassiveAggressiveClassifier": linear_model.PassiveAggressiveClassifier(),
    "Perceptron": linear_model.Perceptron(),
    "RidgeClassifier": linear_model.RidgeClassifier(),
    "RidgeClassifierCV": linear_model.RidgeClassifierCV(),
    "SGDClassifier": linear_model.SGDClassifier(),
    "SGDOneClassSVM": linear_model.SGDOneClassSVM(),
    "LinearRegression": linear_model.LinearRegression(),
    "Ridge": linear_model.Ridge(),
    "RidgeCV": linear_model.RidgeCV(),
    "SGDRegressor": linear_model.SGDRegressor(),
    "ElasticNet": linear_model.ElasticNet(),
    "ElasticNetCV": linear_model.ElasticNetCV(),
    "Lars": linear_model.Lars(),
    "LarsCV": linear_model.LarsCV(),
    "Lasso": linear_model.Lasso(),
    "LassoCV": linear_model.LassoCV(),
    "LassoLars": linear_model.LassoLars(),
    "LassoLarsCV": linear_model.LassoLarsCV(),
    "LassoLarsIC": linear_model.LassoLarsIC(),
    "OrthogonalMatchingPursuit": linear_model.OrthogonalMatchingPursuit(),
    "OrthogonalMatchingPursuitCV": linear_model.OrthogonalMatchingPursuitCV(),
    "AdaBoostClassifier": ensemble.AdaBoostClassifier(),
    "BernoulliNB": naive_bayes.BernoulliNB(),
    "CategoricalNB": naive_bayes.CategoricalNB(),
    "ComplementNB": naive_bayes.ComplementNB(),
    "GaussianNB": naive_bayes.GaussianNB(),
    "MultinomialNB": naive_bayes.MultinomialNB(),
    "KNeighborsClassifier": neighbors.KNeighborsClassifier(),
    "KNeighborsRegressor": neighbors.KNeighborsRegressor(),
    "BernoulliRBM": neural_network.BernoulliRBM(),
    "MLPClassifier": neural_network.MLPClassifier(),
    "MLPRegressor": neural_network.MLPRegressor(),
    "SVC": svm.SVC(),
    "SVR": svm.SVR(),
    "DecisionTreeClassifier": tree.DecisionTreeClassifier(),
    "DecisionTreeRegressor": tree.DecisionTreeRegressor(),
    "ExtraTreeClassifier": tree.ExtraTreeClassifier(),
    "ExtraTreeRegressor": tree.ExtraTreeRegressor(),
    "ARDRegression": linear_model.ARDRegression(),
    "BayesianRidge": linear_model.BayesianRidge(),
    "MultiTaskElasticNet": linear_model.MultiTaskElasticNet(),
    "MultiTaskElasticNetCV": linear_model.MultiTaskElasticNetCV(),
    "MultiTaskLasso": linear_model.MultiTaskLasso(),
    "MultiTaskLassoCV": linear_model.MultiTaskLassoCV(),
    "HuberRegressor": linear_model.HuberRegressor(),
    "QuantileRegressor": linear_model.QuantileRegressor(),
    "RANSACRegressor": linear_model.RANSACRegressor(),
    "TheilSenRegressor": linear_model.TheilSenRegressor(),
    "PoissonRegressor": linear_model.PoissonRegressor(),
    "TweedieRegressor": linear_model.TweedieRegressor(),
    "GammaRegressor": linear_model.GammaRegressor(),
    "XGBClassifier": XGBClassifier(),
    "XGBRegressor": XGBRegressor(),
    "CatBoostClassifier": CatBoostClassifier(),
    "CatBoostRegressor": CatBoostRegressor(),
    "LGBMClassifier": LGBMClassifier(),
    "LGBMRegressor": LGBMRegressor(),
    "LassoPipe": Pipeline([("scaler", RobustScaler()),
                 ("lasso_selector", LassoSelector(linear_model.LassoCV(n_alphas=2500, cv=8, n_jobs=-1, max_iter=10000))),
                 ("final_estimator", linear_model.LinearRegression())])
}

